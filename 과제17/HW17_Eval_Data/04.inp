void get_row_order(){
    int inp, row_index = 0;
    cin >> jungle_size;
    jungle.push_back(make_pair(0,0));
    while(cin >> inp){
        if(inp){
            row_index += 1;
            while(1){
                jungle.push_back(make_pair(inp, row_index));
                cin >> inp;
                if (inp == 0) {
                    break;
                }
            }
        } else {
            cin >> inp;
            row_index += inp;
        }
    }
}

int find_difference(int i){
    return jungle[i].first - jungle[i-1].first;
}

void get_column_order(){
    int column_index = 1, difference, last_blank;
    sort(jungle.begin(), jungle.end());
    PRINT_NUM(jungle_size);

    while(column_index < jungle.size()){
        difference = find_difference(column_index);
        if (difference > 1){ 
            PRINT_BLANK(difference-1);
        }

        PRINT_POINT(jungle[column_index]);

        while(find_difference(column_index+1) == 0){
            PRINT_POINT(jungle[column_index+1]);
            column_index += 1;
        }

        PRINT_NUM(0);
        column_index += 1;
    }

    last_blank = jungle_size-jungle[jungle.size()-1].first;
    if (last_blank) {
        PRINT_BLANK(last_blank);
    }
}

int main(){
    get_row_order();
    get_column_order();
    return 0;
}